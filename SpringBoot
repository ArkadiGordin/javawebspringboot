// ArticleController.java
@RestController
@RequestMapping("/articles")
public class ArticleController {
    
    private final ArticleService articleService;
    
    public ArticleController(ArticleService articleService) {
        this.articleService = articleService;
    }
    
    // Получение всех статей
    @GetMapping
    public List<Article> getAllArticles() {
        return articleService.getAllArticles();
    }
    
    // Получение статьи по идентификатору
    @GetMapping("/{id}")
    public Article getArticleById(@PathVariable Long id) {
        return articleService.getArticleById(id);
    }
    
    // Создание статьи
    @PostMapping
    public Article createArticle(@RequestBody Article article) {
        return articleService.createArticle(article);
    }
    
    // Обновление статьи
    @PutMapping("/{id}")
    public Article updateArticle(@PathVariable Long id, @RequestBody Article article) {
        return articleService.updateArticle(id, article);
    }
    
    // Удаление статьи
    @DeleteMapping("/{id}")
    public void deleteArticle(@PathVariable Long id) {
        articleService.deleteArticle(id);
    }
}

java
// Article.java
@Entity
@Table(name = "articles")
public class Article {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String title;
    
    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;
    
    // Геттеры и сеттеры
    // ...
}

java
// ArticleService.java
@Service
public class ArticleService {
    
    private final ArticleRepository articleRepository;
    
    public ArticleService(ArticleRepository articleRepository) {
        this.articleRepository = articleRepository;
    }
    
    public List<Article> getAllArticles() {
        return articleRepository.findAll();
    }
    
    public Article getArticleById(Long id) {
        return articleRepository.findById(id).orElseThrow(() -> new NotFoundException("Статья не найдена"));
    }
    
    public Article createArticle(Article article) {
        return articleRepository.save(article);
    }
    
    public Article updateArticle(Long id, Article updatedArticle) {
        Article existingArticle = getArticleById(id);
        existingArticle.setTitle(updatedArticle.getTitle());
        existingArticle.setContent(updatedArticle.getContent());
        return articleRepository.save(existingArticle);
    }
    
    public void deleteArticle(Long id) {
        Article existingArticle = getArticleById(id);
        articleRepository.delete(existingArticle);
    }
}

java
// ArticleRepository.java
@Repository
public interface ArticleRepository extends JpaRepository<Article, Long> {
}
